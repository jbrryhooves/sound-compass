#include <array>
#include <cstddef>
#include <functional>
#include <iostream>
#include <optional>
#include <string>

#include <algorithm>
#include <chrono>
#include <vector>


#include <fmt/core.h>
#include <spdlog/spdlog.h>

#include <kfr/base.hpp>
#include <kfr/dsp/biquad.hpp>
#include <kfr/dsp.hpp>
#include <kfr/io.hpp>


#include <audioProcessor/audioProcessor.hpp>

using namespace std::chrono;


const static uint16_t BLOCK_SIZE = 960;// 33 1/3rd octave bands with 480 samples.
const static float_t SAMPLE_RATE = 48000.0;
const static int FILTER_COUNT= 30;


//clang-format off
static uint32_t  mic1 [BLOCK_SIZE] = {12181293, 13335284, 14360487, 15230209, 15921809, 16417279, 16703720, 16773674, 16625320, 16262521, 15694721, 14936705, 14008207, 12933401, 11740269, 10459876, 9125557, 7772051, 6434597, 5148017, 3945806, 2859265, 1916683, 1142599, 557167, 175630, 7920, 58404, 325768, 803050, 1477825, 2332524, 3344896, 4488582, 5733806, 7048150, 8397392, 9746406, 11060069, 12304180, 13446347, 14456835, 15309334, 15981650, 16456278, 16720862, 16768513, 16597991, 16213734, 15625748, 14849340, 13904725, 12816497, 11612986, 10325528, 8987641, 7634159, 6300318, 5020847, 3829057, 2755976, 1829543, 1073877, 508652, 148585, 3049, 75834, 365045, 863152, 1557187, 2429080, 3456131, 4611601, 5865406, 7184904, 8535741, 9882747, 11190852, 12426001, 13556034, 14551532, 15386576, 16039425, 16493083, 16735739, 16761074, 16568429, 16162819, 15554806, 14760218, 13799743, 12698388, 11484826, 10190653, 8849563, 7496472, 6166608, 4894594, 3713549, 2654220, 1744187, 1007145, 462281, 123781, 459, 95526, 406505, 925301, 1638407, 2527256, 3568708, 4735647, 5997693, 7321986, 8674050, 10018681, 11320874, 12546724, 13664315, 14644552, 15461914, 16095120, 16527684, 16748344, 16751356, 16536641, 16109790, 15481915, 14669363, 13693290, 12579107, 11355824, 10055288, 8711359, 7359028, 6033502, 4769292, 3599312, 2554023, 1660639, 942420, 418065, 101226, 152, 117473, 450137, 989481, 1721464, 2627028, 3682596, 4860688, 6130629, 7459358, 8812281, 10154173, 11450097, 12666315, 13771162, 14735871, 15535328, 16148718, 16560070, 16758676, 16739364, 16502638, 16054660, 15407094, 14576799, 13585393, 12458686, 11226014, 9919469, 8573068, 7221864, 5901036, 4644974, 3486378, 2455413, 1578921, 879721, 376018, 80925, 2126, 141671, 495928, 1055673, 1806334, 2728366, 3797765, 4986687, 6264180, 7596983, 8950397, 10289183, 11578488, 12784743, 13876544, 14825464, 15606798, 16200205, 16590233, 16766730, 16725100, 16466426, 15997444, 15330363, 14482552, 13476082, 12337158, 11095433, 9783234, 8434726, 7085017, 5769248, 4521674, 3374777, 2358418, 1499056, 819065, 336151, 62884, 6381, 168112, 543865, 1123860, 1892994, 2831244, 3914182, 5113613, 6398309, 7734824, 9088360, 10423677, 11706011, 12901976, 13980433, 14913305, 15676305, 16249567, 16618166, 16772506, 16708568, 16428018, 15938159, 15251745, 14386647, 13365387, 12214556, 10964115, 9646620, 8296372, 6948525, 5638172, 4399426, 3264541, 2263062, 1421064, 760468, 298474, 47108, 12916, 196789, 593937, 1194023, 1981422, 2935634, 4031816, 5241429, 6532980, 7872842, 9226132, 10557618, 11832632, 13017980, 14082801, 14999371, 15743829, 16296790, 16643860, 16776001, 16689774, 16387423, 15876820, 15171259, 14289110, 13253339, 12090913, 10832097, 9509663, 8158043, 6812425, 5507844, 4278264, 3155698, 2169373, 1344968, 703946, 262997, 33601, 21730, 227694, 646130, 1266143, 2071593, 3041508, 4150636, 5370101, 6668155, 8011000, 9363677, 10690968, 11958316, 13132725, 14183620, 15083640, 15809352, 16341863, 16667308, 16777214, 16668721, 16344652, 15813444, 15088929, 14189968, 13139967, 11966263, 10699414, 9372402, 8019776, 6676753, 5378299, 4158219, 3048279, 2077376, 1270788, 649515, 229731, 22367, 32820, 260819, 700428, 1340201, 2163482, 3148835, 4270608, 5499595, 6803798, 8149262, 9500957, 10823692, 12083029, 13246180, 14282863, 15166087, 15872857, 16384772, 16688504, 16776146, 16645415, 16299716, 15748049, 15004776, 14089248, 13025303, 11840640, 10566102, 9234873, 7881610, 6541547, 5249574, 4039326, 2942313, 1987096, 1198544, 597188, 198685, 13408, 46183, 296156, 756818, 1416176, 2257064, 3257589, 4391701, 5629874, 6939872, 8287588, 9637934, 10955753, 12206736, 13358313, 14380502, 15246690, 15934325, 16425505, 16707442, 16772796, 16619864, 16252629, 15680651, 14918823, 13986978, 12909378, 11714078, 10432198, 9097113, 7743582, 6406844, 5121702, 3921615, 2837828, 1898557, 1128256, 546981, 169866, 6728, 61815, 333693, 815283, 1494048, 2352314, 3367737, 4513881, 5760904, 7076340, 8425942, 9774571, 11087117, 12329406, 13469095, 14476511, 15325428, 15993741, 16464053, 16724118, 16767165, 16592073, 16203402, 15611270, 14831093, 13883184, 12792223, 11586611, 10297739, 8959161, 7605729, 6272680, 4994719, 3805120, 2734853, 1811783, 1059943, 498908, 143283, 2328, 79713, 373422, 875809, 1573795, 2449206, 3479252, 4637115, 5892648, 7213165, 8564285, 9910831, 11217746, 12451003, 13578494, 14570865, 15402278, 16051089, 16500404, 16738526, 16759255, 16562051, 16152049, 15539924, 14741611, 13777896, 12673869, 11458274, 10162759, 8821054, 7468089, 6139091, 4868659, 3689871, 2633415, 1726798, 993624, 452980, 118943, 209, 99870, 415331, 938379, 1655396, 2547714, 3592102, 4761369, 6025072, 7350310, 8702581, 10046677, 11347605, 12571495, 13686482, 14663536, 15477221, 16106352, 16534548, 16750662, 16749068, 16529806, 16098585, 15466633, 14650401, 13671142, 12554351, 11329103, 10027298, 8682829, 7330700, 6006114, 4743557, 3575900, 2533544, 1643626, 929316, 409211, 96852, 372, 122282, 459409, 1002975, 1738829, 2647811, 3706257, 4886610, 6158138, 7487738, 8840792, 10182073, 11476660, 12690849, 13793028, 14754501, 15550236, 16159515, 16566477, 16760524, 16736607, 16495346, 16043024, 15391416, 14557488, 13562951, 12433699, 11199131, 9891390, 8544524, 7193598, 5873785, 4619447, 3463239, 2435265, 1562289, 867037, 367613, 77017, 2817, 146943, 505644, 1069581, 1824070, 2749470, 3821686, 5012804, 6291812, 7625410, 8978879, 10316980, 11604875, 12809033, 13898104, 14843734, 15621302, 16210565, 16596180, 16768109, 16721874, 16458681, 15985380, 15314294, 14462897, 13453353, 12311946, 11068395, 9755074, 8406177, 7056822, 5742141, 4496361, 3351918, 2338606, 1482808, 806805, 328196, 59443, 7543, 173846, 554023, 1138177, 1911097, 2852662, 3938357, 5139916, 6426055, 7763290, 9116806, 10451362, 11732214, 12926015, 14001682, 14931211, 15690401, 16259487, 16623651, 16773414, 16704875, 16419820, 15925669, 15235289, 14366653, 13342376, 12189127, 10936929, 9618386, 8267824, 6920408, 5611216, 4374335, 3241966, 2243592, 1405206, 748635, 290972, 44135, 14549, 202984, 604534, 1208745, 1999887, 2957361, 4056239, 5267912, 6560833, 7901341, 9254535, 10585184, 11858645, 13041762, 14103733, 15016908, 15757514, 16306267, 16648882, 16776438, 16685614, 16378775, 15863909, 15154421, 14268783, 13230052, 12065273, 10804771, 9481363, 8129505, 6784393, 5481047, 4253400, 3133415, 2150250, 1329503, 692543, 255951, 31097, 23832, 234348, 657162, 1281267, 2090414, 3063536, 4175299, 5396756, 6696107, 8039523, 9392028, 10718408, 11984131, 13156243, 14204229, 15100802, 15822622, 16350894, 16671866, 16777181, 16664096, 16335556, 15800115, 15071712, 14169313, 13116411, 11940420, 10671955, 9344043, 7991256, 6648814, 5351669, 4133590, 3026293, 2058605, 1255721, 638544, 223143, 20332, 35392, 267930, 711893, 1355722, 2182654, 3171161, 4295505, 5526415, 6831842, 8177801, 9529248, 10850998, 12108639, 13269428, 14303143, 15182871, 15885708, 16393356, 16692597, 16775641, 16640327, 16290175, 15734304, 14987186, 14068271, 13001484, 11814600, 10538519, 9206464, 7853116, 6513709, 5223116, 4014938, 2920630, 1968682, 1183879, 586654, 192555, 11843, 49223, 303721, 768713, 1432090, 2276583, 3280204, 4416825, 5656852, 6968001, 8316136, 9666158, 10982918, 12232135, 13381285, 14400448, 15263091, 15946754, 16433639, 16711069, 16771820, 16614312, 16242645, 15666496, 14900864, 13965684, 12885303, 11687848, 10404497, 9068661, 7715120, 6379114, 5095425, 3897476, 2816454, 1880506, 1113997, 536886, 164197, 5633, 65323, 341712, 827605, 1510351, 2372174, 3390638, 4539225, 5788032, 7104546, 8454491, 9802720, 11114133, 12354586, 13491783, 14496118, 15341441, 16005745, 16471734, 16727277, 16765719, 16586061, 16192979, 15596708, 14812771, 13861580, 12767898, 11560199, 10269927, 8930674, 7577309, 6245065, 4968630, 3781235, 2713794, 1794099, 1046094, 489254, 138076, 1704, 83687, 381892, 888554, 1590482, 2469402, 3502430, 4662672, 5919920, 7241440, 8592828, 9938898, 11244606, 12475958, 13600894, 14590126, 15417900, 16062663, 16507631, 16741216, 16757339, 16555579, 16141190, 15524959, 14722931, 13755987, 12649301, 11431687, 10134845, 8792540, 7439717, 6111600, 4842765, 3666247, 2612678, 1709487, 980189, 443771, 114200, 56, 104310, 424249, 951543, 1672463, 2568240, 3615552, 4787133, 6052479, 7378646, 8731109, 10074654, 11374303, 12596218, 13708586, 14682447, 15492446, 16117494, 16541318, 16752884, 16746683, 16522876, 16087291, 15451269, 14631367, 13648934, 12529546, 11302347, 9999288, 8654295, 7302384, 5978754, 4717865, 3552545, 2513133, 1626691, 916298, 400449, 92574, 690, 127187, 468773, 1016555, 1756271, 2668661, 3729973, 4912573, 6185673, 7516128, 8869297, 10209952, 11503187, 12715333, 13814832, 14773057, 15565060, 16170223, 16572788, 16762276, 16733752, 16487960, 16031299, 15375657, 14538106, 13540450, 12408664, 11172215, 9863294, 8515978, 7165347, 5846563, 4593963, 3440157, 2415186, 1545735, 854440, 359300, 73206};
//static float_t mic1_float[BLOCK_SIZE] ;

//clang-format on

typedef struct
{
    int filterBandNumber;
    float lowerFreqCutOff;
    float centerFreq;
    float upperFreqCutOff;
    std::vector<kfr::biquad_params<float_t>> secondOrderStagesCoefficients;
    std::unique_ptr<kfr::biquad_filter<float_t>> biquadFilter;

} OctaveFilter;


// clang-format off
static std::array<OctaveFilter, FILTER_COUNT> thirdOctaveFilters = {
    OctaveFilter{ .filterBandNumber = 14, .lowerFreqCutOff = 22.38721139,	.centerFreq =25.11886432, 	.upperFreqCutOff =28.18382931},
    OctaveFilter{ .filterBandNumber = 15, .lowerFreqCutOff = 28.18382931,	.centerFreq =31.6227766, 	.upperFreqCutOff =35.48133892},
    OctaveFilter{ .filterBandNumber = 16, .lowerFreqCutOff = 35.48133892,	.centerFreq =39.81071706, 	.upperFreqCutOff =44.66835922},
    OctaveFilter{ .filterBandNumber = 17, .lowerFreqCutOff = 44.66835922,	.centerFreq =50.11872336, 	.upperFreqCutOff =56.23413252},
    OctaveFilter{ .filterBandNumber = 18, .lowerFreqCutOff = 56.23413252,	.centerFreq =63.09573445, 	.upperFreqCutOff =70.79457844},
    OctaveFilter{ .filterBandNumber = 19, .lowerFreqCutOff = 70.79457844,	.centerFreq =79.43282347, 	.upperFreqCutOff =89.12509381},
    OctaveFilter{ .filterBandNumber = 20, .lowerFreqCutOff = 89.12509381,	.centerFreq =100.0, 	    .upperFreqCutOff =112.2018454},
    OctaveFilter{ .filterBandNumber = 21, .lowerFreqCutOff = 112.2018454,	.centerFreq =125.8925412, 	.upperFreqCutOff =141.2537545},
    OctaveFilter{ .filterBandNumber = 22, .lowerFreqCutOff = 141.2537545,	.centerFreq =158.4893192, 	.upperFreqCutOff =177.827941},
    OctaveFilter{ .filterBandNumber = 23, .lowerFreqCutOff = 177.827941,	.centerFreq =199.5262315, 	.upperFreqCutOff =223.8721139},
    OctaveFilter{ .filterBandNumber = 24, .lowerFreqCutOff = 223.8721139,	.centerFreq =251.1886432, 	.upperFreqCutOff =281.8382931},
    OctaveFilter{ .filterBandNumber = 25, .lowerFreqCutOff = 281.8382931,	.centerFreq =316.227766, 	.upperFreqCutOff =354.8133892},
    OctaveFilter{ .filterBandNumber = 26, .lowerFreqCutOff = 354.8133892,	.centerFreq =398.1071706, 	.upperFreqCutOff =446.6835922},
    OctaveFilter{ .filterBandNumber = 27, .lowerFreqCutOff = 446.6835922,	.centerFreq =501.1872336, 	.upperFreqCutOff =562.3413252},
    OctaveFilter{ .filterBandNumber = 28, .lowerFreqCutOff = 562.3413252,	.centerFreq =630.9573445, 	.upperFreqCutOff =707.9457844},
    OctaveFilter{ .filterBandNumber = 29, .lowerFreqCutOff = 707.9457844,	.centerFreq =794.3282347, 	.upperFreqCutOff =891.2509381},
    OctaveFilter{ .filterBandNumber = 30, .lowerFreqCutOff = 891.2509381,	.centerFreq =1000.0, 	    .upperFreqCutOff =1122.018454},
    OctaveFilter{ .filterBandNumber = 31, .lowerFreqCutOff = 1122.018454,	.centerFreq =1258.925412, 	.upperFreqCutOff =1412.537545},
    OctaveFilter{ .filterBandNumber = 32, .lowerFreqCutOff = 1412.537545,	.centerFreq =1584.893192, 	.upperFreqCutOff =1778.27941},
    OctaveFilter{ .filterBandNumber = 33, .lowerFreqCutOff = 1778.27941,	.centerFreq =1995.262315, 	.upperFreqCutOff =2238.721139},
    OctaveFilter{ .filterBandNumber = 34, .lowerFreqCutOff = 2238.721139,	.centerFreq =2511.886432, 	.upperFreqCutOff =2818.382931},
    OctaveFilter{ .filterBandNumber = 35, .lowerFreqCutOff = 2818.382931,	.centerFreq =3162.27766, 	.upperFreqCutOff =3548.133892},
    OctaveFilter{ .filterBandNumber = 36, .lowerFreqCutOff = 3548.133892,	.centerFreq =3981.071706, 	.upperFreqCutOff =4466.835922},
    OctaveFilter{ .filterBandNumber = 37, .lowerFreqCutOff = 4466.835922,	.centerFreq =5011.872336, 	.upperFreqCutOff =5623.413252},
    OctaveFilter{ .filterBandNumber = 38, .lowerFreqCutOff = 5623.413252,	.centerFreq =6309.573445, 	.upperFreqCutOff =7079.457844},
    OctaveFilter{ .filterBandNumber = 39, .lowerFreqCutOff = 7079.457844,	.centerFreq =7943.282347, 	.upperFreqCutOff =8912.509381},
    OctaveFilter{ .filterBandNumber = 40, .lowerFreqCutOff = 8912.509381,	.centerFreq =10000.0, 	    .upperFreqCutOff =11220.18454},
    OctaveFilter{ .filterBandNumber = 41, .lowerFreqCutOff = 11220.18454,	.centerFreq =12589.25412, 	.upperFreqCutOff =14125.37545},
    OctaveFilter{ .filterBandNumber = 42, .lowerFreqCutOff = 14125.37545,	.centerFreq =15848.93192, 	.upperFreqCutOff =17782.7941},
    OctaveFilter{ .filterBandNumber = 43, .lowerFreqCutOff = 17782.7941,	.centerFreq =19952.62315, 	.upperFreqCutOff =22387.21139},
};


kfr::univector<float_t, BLOCK_SIZE> output;
kfr::univector<float_t, BLOCK_SIZE> mic1_float;

// clang-format on
bool audioProcessor::audioProcessor::init()
{

    fmt::print("{}  c\n", kfr::library_version());

    for (auto &f : thirdOctaveFilters) { 
        kfr::zpk<float_t> filt = iir_bandpass(kfr::butterworth<float_t>(4), f.lowerFreqCutOff, f.upperFreqCutOff, SAMPLE_RATE); 
        f.secondOrderStagesCoefficients = to_sos(filt);
        f.biquadFilter.reset(new kfr::biquad_filter<float_t>(f.secondOrderStagesCoefficients));
    }

    for (size_t i = 0; i < BLOCK_SIZE; i++) { 
        mic1_float[i] = ((float_t)mic1[i] - (float_t)(1 << 23)) / (float_t)(1 << 24);
    }
    return false;
}

void audioProcessor::audioProcessor::processAudioFrame(AudioFrame &audioFrame, ProcessResult &result)
{

    //for (size_t i = 0; i < 100; i++) { 
    //    mic1_float[i] *= i / 100.0;
    //    mic1_float[BLOCK_SIZE - i-1] *= (i) / 100.0;
    //}
    
	//const std::string options = "phaseresp=False, log_freq=True, freq_dB_lim=(-160, 10), padwidth=8192";
    //  kfr::plot_show("butterworth_bandpass4", output, options + ", title='4th-order Butterworth filter, bandpass'");

    for (size_t run = 0; run < 500000; run++) {
    
    
        auto start = high_resolution_clock::now();

        for (size_t angle = 0; angle < 50; angle++) {
            for (size_t f = 0; f < FILTER_COUNT; f++) { 
                thirdOctaveFilters[f].biquadFilter->apply(output.data(), mic1_float, BLOCK_SIZE); 
                //thirdOctaveFilters[f].biquadFilter->apply(mic1_float.data(), BLOCK_SIZE); 
            }
        }
        auto stop = high_resolution_clock::now();

        // Get duration. Substart timepoints to get duration. To cast it to proper unit
        // use duration cast method
        auto duration = duration_cast<microseconds>(stop - start);

        fmt::print("duration: {}us\n", duration.count());
    }
}

